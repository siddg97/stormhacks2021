openapi: 3.0.0
info:
  title: Server API Docs
  description: Endpoints for performing various tasks on the Interview Buddy backend
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http # FIXME this must be https
host: localhost:8000/api

paths:

  /api/ping:
    get:
      description: Ping server to check if its ready to serve requests
      tags:
        - Checks
      operationId: isRunning
      responses:
        '200':
          description: Server is ready to serve requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingResponse"
        '500':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/questions:
    post:
      security: []
      description: Create questions for a user. If cookie with user ID is received, questions will be saved for that user, else a new user is made and a cookie is sent back to the client
      tags:
        - Questions
      operationId: saveQuestions
      parameters:
        - name: IB_USER_ID
          in: cookie
          schema:
            type: string
            example: 60711da216252e4b17c9357f
      requestBody:
        description: List of questions to practice for a user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestions"
      responses:
        '201':
          headers:
            Set-Cookie:
              schema:
                type: string
                example: IB_USER_ID=507f191e810c19729de860ea; Path=/; HttpOnly
          description: Questions were saved under an anonymous user. Either existing user or a new one is made
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateQuestionsResponse"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      description: Retrieve all questions belonging to a user
      tags:
        - Questions
      operationId: getQuestions
      parameters:
        - name: IB_USER_ID
          required: true
          in: cookie
          schema:
            type: string
            example: 60711da216252e4b17c9357f
      responses:
        '200':
          description: All question documents belonging to the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQuestionsResponse"
        '401':
          description: No user cookie found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/questions/{question_id}:
    get:
      tags:
        - Questions
      operationId: getQuestion
      parameters:
        - name: IB_USER_ID
          required: true
          in: cookie
          schema:
            type: string
            example: 60711da216252e4b17c9357f
        - name: questions_id
          in: path
          type: string
          example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Question document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQuestionResponse"
        '404':
          description: Questions with the requested id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '401':
          description: User does not own the question or no cookie with user ID found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/questions/{question_id}/answer:
    post:
      description: Submit recorded voice as answer for a question. Returns a task ID and a polling url for checking status of the task
      tags:
        - Answers
      operationId: submitAnswer
      parameters:
        - name: IB_USER_ID
          in: cookie
          required: true
          schema:
            type: string
            example: 60711da216252e4b17c9357f
        - name: questions_id
          in: path
          type: string
          example: 507f191e810c19729de860ea
      requestBody:
        description: .webm audio file for the recorded answer associated with the question
        required: true
        content:
          form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                name:
                  type: string
                  example: audio
  /api/questions/results:
    get:
      description: Get the aggregated results for all answers submitted for questions belonging to users
      tags:
        - Results
      operationId: getResultsAllQuestions
      parameters:
        - name: IB_USER_ID
          in: cookie
          schema:
            type: string
            example: 60711da216252e4b17c9357f
      responses:
        '200':
          description: Aggregated results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggdResultsResponse"
        '401':
          description: User does not own the question or no cookie with user ID found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: No questions for the user ID provided exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/questions/<question_id>/results:
    get:
      description: Get results for a specific question
      tags:
        - Results
      operationId: getResultsQuestion
      parameters:
        - name: IB_USER_ID
          in: cookie
          schema:
            type: string
            example: 60711da216252e4b17c9357f
        - name: questions_id
          in: path
          type: string
          example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Results for the answer submitted for the question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultsResponse"
        '401':
          description: User does not own the question or no cookie with user ID found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: No questions for the user ID provided exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/tasks/{task_id}/status:
    get:
      description:
      tags:
        - Tasks
      operationId: getTaskStatus
      parameters:
        - name: task_id
          in: path
          type: string
          example: 41bdc66e-4fe5-43b2-a73e-c8873415614a
      responses:
        '200':
          description: Task status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskStatusResponse"
        '401':
          description: No user ID found in cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: No task with provided task ID found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server had some error and was not able to process the request. Try again in some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
security:
  - cookieAuth: []

components:
  securitySchemes:
    cookieAuth:
      type: string
      in: cookie
      name: IB_USER_ID
  schemas:
    TaskStatusResponse:
      type: object
      properties:
        state:
          type: object
          properties:
            current:
              type: integer
              example: 50
            total:
              type: integer
              example: 100
            state:
              type: string
              enum:
                - PENDING
                - SUCCESS
                - FAILURE
                - PROGRESS
              example: PROGRESS
            status:
              type: string
              example: "Processing audio"
            result:
              oneOf:
                - $ref: "#/components/schemas/EmptyObject"
                - $ref: "#/components/schemas/Stats"
    PingResponse:
      type: object
      properties:
        ping:
          type: string
          default: pong
    CreateQuestions:
        type: object
        required:
          - questions
        properties:
          questions:
            type: array
            items:
              type: string
            example: ["Why do you want to work for our company?", "Why do you think you are a good candidate for this position?"]
    CreateQuestionsResponse:
      type: object
      required:
        - questions
      properties:
        questions:
          type: array
          items:
            type: string
          example: ["507f191e810c19729de860ea","507f191e810c19729de860eb"]
    GetQuestionsResponse:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: "#/components/schemas/QuestionDoc"
    GetQuestionResponse:
      type: object
      properties:
        question:
          $ref: "#/components/schemas/QuestionDoc"
    SubmitAnswerResponse:
      type: object
      properties:
        task_id:
          type: string
          example: 41bdc66e-4fe5-43b2-a73e-c8873415614a
        poll_url:
          type: string
          example: /api/tasks/41bdc66e-4fe5-43b2-a73e-c8873415614a/status
    AggdResultsResponse:
      type: object
      properties:
        results:
          $ref: "#/components/schemas/AggdStats"
    ResultsResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/Stats"
    QuestionDoc:
      type: object
      properties:
        description:
          type: string
          example: "Why do you want to work for our company?"
        user_id:
          type: string
          example: "9a7f191e810c19729de860ea"
        created_on:
          type: date-time
          example: 2020-01-07T10:40:52Z
        stats:
          $ref: "#/components/schemas/Stats"
        answer:
          type: string
          example: "gcs://gcp-project/user_id/question_id.wav"
    AggdStats:
      type: object
      properties:
        words_per_minute:
          type: object
          properties:
            total:
              type: number
              example: 111.5
            avg:
              type: number
              example: 223.0
        number_of_pauses:
          type: object
          properties:
            total:
              type: number
              example: 14.0
            avg:
              type: number
              example: 28.0
    Stats:
      type: object
      properties:
        articulation_rate:
          type: number
          example: 4.0
        accuracy:
          type: number
          example: 0.9458
          min: 0
          max: 1
        number_of_pauses:
          type: number
          example: 13.0
        number_of_syllables:
          type: number
          example: 82.0
        balance:
          type: number
          example: 0.645
          min: 0
          max: 1
        original_duration:
          type: number
          example: 45.1
        speaking_duration:
          type: number
          example: 22.1
        words_per_min:
          type: number
          example: 109
        mood:
          type: string
          enum:
            - passionate
            - normal
            - reading
          example: "reading"
        gender:
          type: string
          enum:
            - "male"
            - "female"
          example: "female"
    ForbiddenError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        description:
          type: string
          example: forbidden, unauthorized
    NotFoundError:
      type: object
      properties:
        code:
          type: integer
          example: 404
        description:
          type: string
          example: resource not found
    BadRequestError:
      type: object
      properties:
        code:
          type: integer
          example: 400
        description:
          type: string
          example: bad request
    InternalServerError:
      type: object
      properties:
        code:
          type: string
          example: 500
        description:
          type: string
          example: something went wrong
    EmptyObject:
      type: object