import { useHistory, useLocation } from 'react-router-dom';
import styled from 'styled-components';
import { routes } from '../constants';
import { useGetResults } from '../hooks'

const Card = styled.div`
  width: 250px;
  background-color: var(--color-primary);
  color: white;
  border-radius: 10px;
  padding: 10px;
  margin: 10px;

  display: flex;
  flex-direction: column;

  & p {
    color: white;
  }
`;

const StatDiv = styled.div`
  font-size: 2.5em;
  font-weight: 900;
  text-align: center;
  padding: 30px 0;
  text-transform: uppercase;
`;

const AvgResults = styled.div`
  display: flex;
`;

const DescriptionDiv = styled.div`
`;

const Div = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const Result = styled.div`
  background-color: var(--color-primary);
  color: white;
  border-radius: 10px;
  padding: 20px;
  margin: 15px;

  & p {
    color: white;
  }

  & h1 {
    color: white;
  }
`;

const List = styled.ul`
  display: flex;
  padding: 0;
`;

const ListItem = styled.li`
  list-style-position: inside;
  padding-right: 16px;
`;

const ResultsPage = () => {
  const history = useHistory();
  const { pollURLs } = useLocation().state;

  const handleClick = () => {
    history.push(routes.SELECT_QUESTIONS);
  };

  const { isLoading, isError, results } = useGetResults(pollURLs);
  console.log('results: ', results);
  if (isLoading) return <span>Loading...</span>
  if (isError)   return <span>Error</span>

  const getAverageResults = (results) => {
    const init = {
      accuracy: 0,
      words_per_min: 0,
      articulation_rate: 4, // TODO: change to frequency of filler words
    };

    const averages = results.reduce((acc, curr) => {
      Object.keys(init).forEach((key) => acc[key] += curr[key]);
      return acc;
    }, init);

    Object.keys(averages).forEach((key) => averages[key] /= results.length);

    return averages;
  }

  const averages = getAverageResults(results);

  return (
    <Div>
      <h1>Results</h1>
      <p>Here are your overall insights generated by InterviewBuddy:</p>

      <AvgResults>
        <Card>
          <StatDiv>{Math.trunc(averages.accuracy * 100 )}%</StatDiv>
          <DescriptionDiv>
            <h3>Enunciation of words</h3>
            <p>Take your time to properly enunciate each word, sometimes your interviewer may misunderstand you. This is especially exasperated by online interviews.</p>
          </DescriptionDiv>
        </Card>
        <Card>
          <StatDiv>{Math.trunc(averages.words_per_min)} WPM</StatDiv>
          <DescriptionDiv>
            <h3>Words per minute</h3>
            <p>Try to aim for your natural talking speed, conversational speed is around 130 to 150 words per minute.</p>
          </DescriptionDiv>
        </Card>
        <Card>
          <StatDiv>{Math.trunc(averages.articulation_rate)} per min</StatDiv>
          <DescriptionDiv>
            <h3>Frequency of filler words</h3>
            <p>Be mindful of how many filler words you use such as “um” and “ahs”.</p>
          </DescriptionDiv>
        </Card>
      </AvgResults>

      <div>
        {results.map((result, idx) => (
          <Result>
            <h1>Question {idx + 1}</h1>
            <List>
              <ListItem style={{'list-style-type': 'none'}}>
                {Math.trunc(result.accuracy * 100 )}% enunciation of words
              </ListItem>
              <ListItem>
                {Math.trunc(result.words_per_min)} words per minute
              </ListItem>
              <ListItem>
                {Math.trunc(result.articulation_rate)} filler words per minute
              </ListItem>
            </List>
          </Result>
        ))}
      </div>

      {/* {getAverageResults(results).map((res, idx) => (
        <>
          <h1>Result for question ${idx + 1}</h1>
          <div>
            {JSON.stringify(res)}
          </div>
        </>
      ))} */}
      <button onClick={handleClick} type="button">New Interview</button>
    </Div>
  );
};

export default ResultsPage;
